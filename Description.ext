
class Params
{
	class LoadMission
	{
		title = "Load Previous Mission"; // Param name visible in the list
		values[] = {0,1}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"No","Yes"}; // Description of each selectable item
		default = 0; // Default value; must be listed in 'values' array, otherwise 0 is used
	};
    class LoadArmory
	{
		title = "Load Armory"; // Param name visible in the list
		values[] = {0,1}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"No","Yes"}; // Description of each selectable item
		default = 0; // Default value; must be listed in 'values' array, otherwise 0 is used
	};
    class CustomForecastEnabled
    {
        title = "New Weather"; // Param name visible in the list
		values[] = {0,1}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"No","Yes"}; // Description of each selectable item
		default = 0; // Default value; must be listed in 'values' array, otherwise 0 is used
    };
    class CustomFog
    {
        title = "Forecast Fog Density"; // Param name visible in the list
		values[] = {0,2,4,6,8,10}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"None","Negligible", "Haze", "Fog", "Dense Fog", "Maximum"}; // Description of each selectable item
		default = 0; // Default value; must be listed in 'values' array, otherwise 0 is used
    };
    class CustomOvercast
    {
        title = "Forecast Overcast"; // Param name visible in the list
		values[] = {0,2,4,6,8,10}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"Clear Skies","Almost Clear", "Partly Cloudy", "Cloudy", "Overcast Sky", "Bad Weather"}; // Description of each selectable item
		default = 4; // Default value; must be listed in 'values' array, otherwise 0 is used
    };
    class CustomDaytime
    {
        title = "Daytime"; // Param name visible in the list
		values[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}; // Values; must be integers; has to have the same number of elements as 'texts'
		texts[] = {"0100","0200","0300","0400","0500","0600","0700","0800","0900","1000","1100","1200","1300","1400","1500","1600","1700","1800","1900","2000","2100","2200","2300","2400"}; // Description of each selectable item
		default = 12; // Default value; must be listed in 'values' array, otherwise 0 is used
    };
};

class cfgFunctions
{
    #include "vcom\cfgFunctions.hpp"

    class ASO
    {
        class Debug
        {
            file = "ASO\Debug";
            class debug {};
            class trackGroup {};
        }
        class Misc
        {
            file = "ASO\Misc";
            class assessArtilleryTargets {};
            class assessTargets {};
            class delayedBehaviourChange {};
            class deleteEmptyWH {};
            class doNotMove {};
            class doMove {};
            class enableDynamicSim {};
            class init_aso {};
            class markerFollowObj {};
            class propagateLocalVar {};
            class requestRadio {};
            class revealToGroup {};
            class unGarrison {};
            class getWaypoints {};
            class setWaypoints {};
            class evidence {};
            class showProgress {};
            class isReadError {};
            class animateRadar {};
            class checkForItem {};
            class registerItemAction {};
            class countMurders {};
            class storeDir {};
            class restoreDir {};
            class conditionalRefuel {};
            class handleSupport {};
            class disableSupport {};
            class milTime {};
            class halo {};
        }
        class PersistencePrivate
        {
            file = "ASO\Persistence\Private"
            // Get/Set Functions
            class getInventory {};
            class setInventory {};
            class getCargo {};
            class setCargo {};
            class getPosition {};
            class setPosition {};
            class getHealth {};
            class setHealth {};
            class getMount {};
            class setMount {};
            class getExplosives {};
            class setExplosives {};
            class getDamage {};
            class setDamage {};
            class getWeapons {};
            class setWeapons {};
            class getACESupplies {};
            class setACESupplies {};
            class getMarkers {};
            class setMarkers {};
            class getDbName {};
            class getDateTime {};
            class setDateTime {};
            class getWeather {};
            class setWeather {};
            class getVariables {};
            class setVariables {};
            class getVehicleLock {};
            class setVehicleLock {};
            // Write to Database
            class writeValue {};
            class readValue {};
            class deleteDB {};
            // Cargo Helper
            class putMagazinesInCargo {};
            class putWeaponsInCargo {};
            class putItemsInCargo {};
        }
        class PersistenceHelper
        {
            file = "ASO\Persistence\Helper"
            class actionSaveInventory {};
            class actionSaveCargo {};
            class collectGroup {};
            class collectCrate {};
            class collectObject {};
            class collectVehicle {};
            class loadState {};
            class saveState {};
            class setVehicleName {};
            class localInventory {};
        }
        class PersistencePublic
        {
            file = "ASO\Persistence"
            class executeSaveInventory {};
            class executeLoadInventory {};
            class executeSaveCargo {};
            class executeLoadCargo {};
            class executeSaveMan {};
            class executeLoadMan {};
            class executeSaveVehicle {};
            class executeLoadVehicle {};
            class executeSaveDropped {};
            class executeLoadDropped {};
            class executeSaveMarkers {};
            class executeLoadMarkers {};
            class executeSaveVar {};
            class executeLoadVar {};
            class executeSaveEnvironment {};
            class executeLoadEnvironment {};
            class executeSaveGroup {};
            class executeLoadGroup {};
            class executeSaveObject {};
            class executeLoadObject {};
            class executeSaveDead {};
            class executeLoadDead {};
        }
        class Tasks
        {
            file = "ASO\Tasks"
            class guard {};
            class patrol {};
            class patrolCity {};
            class garrison {};
            class garrisonQuick {};
            class stationary {};
            class patrolDisembark {};
            class patrolEmbark {};
        };
        class Mission
        {
            file = "ASO\Mission"
            class collectTask {};
            class watchTasks {};
            class displayMissionText {};
            class displayNamePosTime {};
            class displayInfo {};
            class addBoolean {};
            class setTrue {};
        };
        class Spawn
        {
            file = "ASO\Spawn"
            class storeSynchronizedGroup {};
            class storeTaskForCrew {};
            class spawnSynchronized {};
        };
    };
};
class CfgRemoteExec
{
        class Commands
        {
                mode = 2; // Remote execution is allowed for all commands
                jip = 1;
        };
        class Functions
        {
                mode = 2; // Remote execution is allowed for all functions
                jip = 1;
                class vcm_serverask { allowedTargets = 0;jip = 1; };
                class VCM_PublicScript { allowedTargets = 0;jip = 1; };
                class BIS_fnc_debugConsoleExec { allowedTargets = 0;jip = 1; };
                class SpawnScript { allowedTargets = 0;jip = 1; };
                class enableSimulationGlobal { allowedTargets = 0;jip = 1; };
                class VCM_fnc_KnowAbout { allowedTargets = 0;jip = 1; };
        };
};
allowFunctionsRecompile = 1;

class Extended_PreInit_EventHandlers {
	VCM_CBASettings = call compile preprocessFileLineNumbers "Vcom\Functions\VCM_Functions\fn_CBASettings.sqf";
};

class CfgDebriefing
{  
	class ASO_Save
	{
		title = "The Mission Continues";
		subtitle = "You live to fight another day.";
		description = "The battle might be over, but you did not yet won the war.";
	};
    class ASO_Fail
	{
		title = "Mission Failed";
		description = "You did the best you could with what you had ...";
	};
    class ASO_Fail_Murder
	{
		title = "Mission Failed";
		description = "Too many civilian casualties. You were supposed to defeat the turks, not join them!";
	};
    class ASO_Fail_Destruction
	{
		title = "Mission Failed";
		description = "You have destroyed too much important infrastructure. The world now thinks you are a terrorist group and has given NATO member Turkey the mandate to snuff you out. This is a fight we cannot win ...";
	};
    class ASO_Win
	{
		title = "Mission Complete";
		subtitle = "What a day! What a lovely day!";
		description = "You made the enemy pay dearly. Because of your perseverance, victory is yours!";
	};
};

class Header
{
	gameType =  Coop;	// Game type
	minPlayers =  1;	// minimum number of players the mission supports
	maxPlayers = 8;	// maximum number of players the mission supports
};

briefingName    = "ASO Framework Example";
author			= "Papa Mike";
OnLoadName		= "ASO Framework 2.2.1";
OnLoadMission	= "Raid a small compound, afterwards take your time and explore what the framework can do in the mission editor.";
onLoadIntro     = "ASO Framework 2.2.1";
overviewText    = "Raid a small compound, afterwards take your time and explore what the framework can do in the mission editor."

respawn = 3;
respawnOnStart = -1;
respawnTemplates[] = {"MenuPosition"};

enableDebugConsole = 1; // SP and loggend in Admins only
forceRotorLibSimulation = 1;